// FlowOps Consolidated Prisma Schema
// Combines schema for workflow and memory in a monolithic approach

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Workflow Models
model Workflow {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  script            String
  databaseDefinitions DatabaseDefinition[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// Memory Models
model DatabaseDefinition {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String   @db.ObjectId
  columns    Column[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  databaseRecords DatabaseRecord[]
}

model Column {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  type                 String
  required             Boolean           @default(false)
  description          String?
  options              SelectOption[]
  databaseDefinition   DatabaseDefinition @relation(fields: [databaseDefinitionId], references: [id], onDelete: Cascade)
  databaseDefinitionId String             @db.ObjectId
}

model SelectOption {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  color     String?
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId  String   @db.ObjectId
}

// This model stores the actual data rows for the no-code database
model DatabaseRecord {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  databaseDefinition   DatabaseDefinition @relation(fields: [databaseDefinitionId], references: [id], onDelete: Cascade)
  databaseDefinitionId String             @db.ObjectId
  // Using a JSON field to store dynamic column values
  data                 Json
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
} 